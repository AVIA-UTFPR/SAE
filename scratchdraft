package _004_someone_need_a_cab;

import java.util.ArrayList;

//import ail.mas.DefaultEnvironment;
import ail.mas.DefaultEnvironmentwRandomness;
import ail.mas.MAS;
import ail.syntax.Action;
import ail.syntax.NumberTermImpl;
import ail.syntax.Predicate;
import ail.syntax.Term;
import ail.syntax.Unifier;
import ail.util.AILexception;
import ajpf.util.choice.ProbBoolChoice;
import ajpf.util.choice.UniformBoolChoice;
import util.Passenger;

public class AutonomousCarEnv extends DefaultEnvironmentwRandomness{


	// Initial position of the car
	private int carX = 5;
	private int carY = 4;

	// Information about the grid
	private int maxX = 5;
	private int maxY = 5;

	// Information about passengers
	private ArrayList<Passenger> passengers = new ArrayList<Passenger>();
	private int maxInitPassengers = 2;

	@Override
	public void setMAS(MAS m) {
		super.setMAS(m);

		initPassengerList();


	}

	private void initPassengerList() {

		for(int i = 0; i < maxInitPassengers; i++) {

			int pickUpX = random_ints.nextInt(maxX);
			int pickUpY = random_ints.nextInt(maxY);

			int dropOffX = random_ints.nextInt(maxX);
			int dropOffY = random_ints.nextInt(maxY);


			passengers.add( new Passenger(pickUpX, pickUpY, dropOffX, dropOffY) );
			System.err.println("Passenger " + i + ": PickUp(" + pickUpX + "," + pickUpY + ") - Drop Off ("+ dropOffX + "," + dropOffY + ")");

		}
	}

	private void moveCar(String agName, Action act, String direction) throws AILexception{

		// Don't move if direction is invalid
		int newCarX = carX;
		int newCarY = carY;

		switch(direction) {

			case "north":
				// Move up in the Y axis
				newCarY++;
				break;
			case "south":
				// Move down in the Y axis
				newCarY--;
				break;
			case "east":
				// Move right in the X axis
				newCarX++;
				break;
			case "west":
				// Move left in the X axis
				newCarX--;
				break;
			default:
				System.err.println("DON'T MOVE");

		}

		Predicate oldPosition = new Predicate("at");
		oldPosition.addTerm(new NumberTermImpl(carX));
		oldPosition.addTerm(new NumberTermImpl(carY));

		Predicate at = new Predicate("at");
		at.addTerm(new NumberTermImpl(newCarX));
		at.addTerm(new NumberTermImpl(newCarY));

		System.err.println("Moving " + direction +  ": From (" + carX + "," + carY + ")" +
							" To (" + newCarX + "," + newCarY + ")");

		// Update position of the agent in the environment
		carX = newCarX;
		carY = newCarY;

		removePercept(agName, oldPosition); //remove old position
		addPercept(agName, at); //inform new position to the agent
	}

	// Identifies agents' actions
	public Unifier executeAction(String agName, Action act) throws AILexception {

		Unifier u = new Unifier();

		if(act.getFunctor().equals("drive")) {

			Term direction = act.getTerm(0);

			moveCar(agName, act, direction.getFunctor());

		}
		else if(act.getFunctor().equals("get_ride")) {

			Passenger currentPassenger = passengers.get(0);

			int pickUpX = 0;
			int pickUpY = 1;

			int dropOffX = 1;
			int dropOffY = 0;


			System.err.println("Pick up is in (" + pickUpX + "," + pickUpY + ")");
			System.err.println("Drop off is in (" + dropOffX + "," + dropOffY + ")");

			Predicate pickUp = new Predicate("pick_up");
			pickUp.addTerm(new NumberTermImpl(pickUpX));
			pickUp.addTerm(new NumberTermImpl(pickUpY));

			Predicate dropOff = new Predicate("drop_off");
			dropOff.addTerm(new NumberTermImpl(dropOffX));
			dropOff.addTerm(new NumberTermImpl(dropOffY));

			addPercept(agName, pickUp);
			addPercept(agName, dropOff);
		}
		else if(act.getFunctor().equals("init_gps")) {

			carX = 0;
			carY = 0;

			Predicate at = new Predicate("at");
			at.addTerm(new NumberTermImpl(carX));
			at.addTerm(new NumberTermImpl(carY));

			System.err.println("Initializing GPS");
			System.err.println("Agent " + agName + " is " + at);

			addPercept(agName, at);
		}
		else if(act.getFunctor().equals("honk")) {

			System.err.println("HONK");

			Predicate noisy = new Predicate("noisy");

			addPercept(agName, noisy);
		}

		super.executeAction(agName, act);

		return u;

	}

}
