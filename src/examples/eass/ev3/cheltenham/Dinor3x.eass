// ----------------------------------------------------------------------------
// Copyright (C) 2012 Louise A. Dennis, and  Michael Fisher 
//
// This file is part of the Engineering Autonomous Space Software (EASS) Library.
// 
// The EASS Library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3 of the License, or (at your option) any later version.
// 
// The EASS Library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with the EASS Library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
// 
// To contact the authors:
// http://www.csc.liv.ac.uk/~lad
//
//----------------------------------------------------------------------------
EASS

:abstraction: dinor3x

:Initial Beliefs:

distance_threshold(0.5)

:Initial Goals:

:Plans:
/* Default plans for handling messages */
+.received(:tell, B): {True} <- +B;   
+.received(:perform, G): {True} <- +!G [perform];
+.received(:achieve, G): {True} <- +!G [achieve];

+distance(D) : {~B obstacle, B distance_threshold(V), D < V} <- assert_shared(obstacle);
+distance(D) : {B obstacle, B distance_threshold(V), V < D} <- remove_shared(obstacle);

+! stop [perform] : {True} <-
	stop;
+! right [perform] : {True} <-
    right;
+! left [perform] : {True} <-
    left;
+! backward [perform] : {True} <-
    backward;
+! forward [perform] : {True} <-
    forward;
+! do_nothing [perform] : {True} <-
    do_nothing;

+change_distance(D) : {B distance_threshold(D1)} <-
    -distance_threshold(D1), +distance_threshold(D);

:name: dinor3x

:Initial Beliefs:

:Initial Goals:

:Plans:

+obstacle : {B active(rule1), B rule(rule1, act1, A), B rule(rule1, act2, B), B rule(rule1, act3, C)} <-
    perf(A),
    perf(B),
	perf(C);
-obstacle : {B active(rule2), B rule(rule2, act1, A), B rule(rule2, act2, B), B rule(rule2, act3, C)} <-
    perf(A),
    perf(B),
	perf(C);
