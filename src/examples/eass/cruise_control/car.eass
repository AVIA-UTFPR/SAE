// ----------------------------------------------------------------------------
// Copyright (C) 2013 Louise A. Dennis, Michael Fisher
//
// This file is part of the Engineering Autonomous Space Software (EASS) Library.
// 
// The EASS Library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3 of the License, or (at your option) any later version.
// 
// The EASS Library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with the EASS Library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
// 
// To contact the authors:
// http://www.csc.liv.ac.uk/~lad
//
//----------------------------------------------------------------------------


:name: car

:Initial Beliefs:

:Initial Goals:

leaving_at_chosen_exit [achieve]

:Plans:

+! leaving_at_chosen_exit [achieve]: {B at_exit, B in_leftmost_lane} <- perf(exit_motorway), *leaving_at_chosen_exit;
+! leaving_at_chosen_exit [achieve]: {B chosen_exit_approaching, B in_leftmost_lane} <- *at_exit; 
+! leaving_at_chosen_exit [achieve]: {B chosen_exit_approaching, ~B in_leftmost_lane} <- +!in_leftmost_lane [achieve];
+! leaving_at_chosen_exit [achieve]: {~B chosen_exit_approaching} <- *chosen_exit_approaching;

+! in_leftmost_lane [achieve]: {B safe_left} <- perf(change_left), *changed_lane, remove_shared(changed_lane);
+! in_leftmost_lane [achieve]: {~B safe_left} <- *safe_left;

+car_ahead_in_lane : {~B in_rightmost_lane, ~B chosen_exit_approaching} <- -! in_leftmost_lane[achieve], +! overtake [perform];

+! overtake [perform] : {B safe_right, B car_ahead_in_lane} <- perf(change_right), *changed_lane, remove_shared(changed_lane);
+! overtake [perform] : {~B safe_right, B car_ahead_in_lane} <- *safe_right, +! overtake [perform];
+! overtake [perform] : {~B car_ahead_in_lane};
-car_ahead_in_left_lane : {~B in_leftmost_lane, ~G in_leftmost_lane [achieve]} <- +! in_leftmost_lane [achieve];


+above_speed_limit: {True} <- perf(maintain_speed);
-safe: {True} <- perf(brake);
+safe: {~B above_speed_limit} <- perf(accelerate);

+driver_accelerates: {~B safe} <- perf(brake);
+driver_accelerates: {B safe} <- perf(accelerate);
+driver_brakes: {True} <- perf(brake);