

:name: follower

:Initial Beliefs:

:Reasoning Rules:

platoon_m(X, Y):- platoon_m, success_ack;
//platoon_m(X, Y):- sp_contr, steering_contr, platoon_m, success_ack;

leave_platoon:- ~steering_contr, no_platoon_m;

steering_cont(1):- steering_contr;

steering_cont(0):- ~ steering_contr;

set_spacing(X):- ack_spacing;
// set_spacing(X):- spacing(X), sapcing, ack_spacing;


:Initial Goals:


:Plans:
	/* Default plans for handling messages */
	+.received(:tell, B): {True} <- +B;   
	+.received(:perform, G): {True} <- +!G [perform];
	+.received(:achieve, G): {True} <- +!G [achieve];

+id(X): {X== 1}<- perf(join_ok(1));

+id(X): {X== 2}<- perf(join_ok(1));

+id_front(X): {B id(3)}<- perf(join_position(X));

+ready_to_leave: {B name(follower3), 
				 ~G platoon_m(follower3, FRONT) [achieve],
				 ~G leave_platoon [achieve],
				 ~G set_spacing(X) [achieve]}
				 <- 
				-leave_agreement(follower3),
		 		+!leave_platoon [achieve];

+ready_to_leave: {B name(follower3), 
				 G platoon_m(follower3, FRONT) [achieve]}
				 <- 
				 -ready_to_leave;

+ready_to_leave: {B name(follower3), 
				 G leave_platoon [achieve]}
				 <- 
				 -ready_to_leave;

//===========initialisation phase-- vehicle joins to platoon after 50 sec

+platoon_set_up: {True}<- 
				+.lock,
				+!speed_contr(1) [perform],
				+!steering_contr(1) [perform], 
				-.lock;

+ready_to_join: {B name(follower3), 
				B name_front(FRONT), 
				~G leave_platoon [achieve], 
				~B steering_contr, 
				~B platoon_m, 
				~G platoon_m(follower3, FRONT) [achieve]} 
				<- 
				-join_agreement(follower3, FRONT),
				-success_ack, 
				+!platoon_m(follower3, FRONT) [achieve], 
				print(follower_3_drop_goal_or_successfully_joined_in_the_middle);

+ready_to_join: {B name(follower3), 
				B name_front(FRONT1), 
				~G leave_platoon [achieve], 
				B steering_contr, B platoon_m} 
				<- 
				-ready_to_join;

+ready_to_join: {B name(follower3), 
				B name_front(FRONT2), 
				G leave_platoon [achieve]} 
				<- 
				-ready_to_join;

+ready_to_join: {B name(follower3),
			 	B name_front(FRONT), 
				G platoon_m(follower3, FRONT) [achieve]} 
				<-
				-ready_to_join;


+wrong_front: {G platoon_m(SENDER, FRONT3) [achieve]}
			  <- 
			  -!platoon_m(SENDER, FRONT3) [achieve], 
				print(belief_not_able_to_join_to_front_of_a_non_platoon_member);

//+!platoon_m(SENDER1, FRONT4) [achieve]: 
//				{G set_spacing(X) [achieve]}
//				<-
//				*set_spacing(X);

+!platoon_m(SENDER1, FRONT4) [achieve]: 
				{B name(SENDER1), 
				~B join_agreement(SENDER1, FRONT4)} 
				<- 
				+!speed_contr(0) [perform], 
				+!steering_contr(0) [perform],
				.send(leader, :tell, message(SENDER1, 1, FRONT4)), -.lock, 
				*join_agreement(SENDER1, FRONT4);


+!platoon_m(SENDER2, FRONT5) [achieve]: 
				{B name(SENDER2), 
				B join_agreement(SENDER2, FRONT5), 
				~B changed_lane} 
				<- 
				+!speed_contr(0) [perform], 
				+!steering_contr(0) [perform], 
				perf(join_ok(1)), 
				*changed_lane;


+!platoon_m(SENDER3, FRONT6) [achieve]: 
				{B name(SENDER3), 
				B join_agreement(SENDER3, FRONT6), 
				B changed_lane, 
				~B steering_contr, 
				~B sp_contr, 
				B initial_distance,
				~G set_spacing(X) [achieve]} 
				<- 
				+!speed_contr(1) [perform], 
				+!steering_contr(1) [perform];	
										
+!platoon_m(SENDER4, FRONT7) [achieve]: 
				{B name(SENDER4), 
				B join_agreement(SENDER4, FRONT7), 
				B changed_lane, 
				~B steering_contr, 
				~B sp_contr,
				~B initial_distance,
				~G set_spacing(X) [achieve]} 
				<- 
				+!speed_contr(1) [perform], 
				*initial_distance;

+!platoon_m(SENDER5, FRONT8) [achieve]: 
				{B name(SENDER5), 
				B join_agreement(SENDER5, FRONT8), 
				B changed_lane, 
				~B steering_contr, 
				B sp_contr, 
				B initial_distance,
				~G set_spacing(X) [achieve]}
				<- 
				+!steering_contr(1) [perform];


+!platoon_m(SENDER6, FRONT9) [achieve]: 
				{B name(SENDER6), 
				B join_agreement(SENDER6, FRONT9), 
				B changed_lane, 
				B steering_contr,
				~B success_ack,
				~G set_spacing(X) [achieve]}
				<- 
				.send(leader, :tell, message(SENDER6, 2)), 
				+success_ack, 
				*platoon_m;		

+!speed_contr(X) [perform]: { X==0}<- +.lock, perf(speed_controller(X)), -sp_contr, -.lock;
+!speed_contr(X) [perform]: { X==1}<- +.lock, perf(speed_controller(X)), +sp_contr, -.lock;

+!steering_contr(X) [perform]: {X==0}<-  +.lock, perf(steering_controller(X)), -steering_contr, -.lock;
+!steering_contr(X) [perform]: {X==1, B sp_contr}<-  +.lock, perf(steering_controller(X)), +steering_contr, -.lock;

// when there is a joining goal, wait until speed controller switches to automatic
+!set_spacing(X) [achieve]: {G platoon_m(SENDER11, FRONT11) [achieve], ~B sp_contr} <- *sp_contr;  
+!set_spacing(X) [achieve]: {G platoon_m(SENDER11, FRONT11) [achieve], B sp_contr} <- 

+!set_spacing(X) [achieve]: {G set_spacing(Y) [achieve], 
							Y < X} 
							<- 
							-!set_spacing(Y) [achieve], 
							-ack_spacing(X);
							
+!set_spacing(X) [achieve]: {G set_spacing(Y) [achieve], 
							X < Y} 
							<- 
							-!set_spacing(Y) [achieve], 
							-ack_spacing(X);
							
+!set_spacing(X) [achieve]: {~B spacing(X),
							B spacing}
							<- 
							-ack_spacing(X), 
							-spacing,
							perf(set_spacing(X)), 
							*spacing;

+!set_spacing(X) [achieve]: {~B spacing}
							<- 
							-ack_spacing(X), 
							perf(set_spacing(X)), 
							*spacing;
							
+!set_spacing(X) [achieve]: {B spacing(X), 
							B spacing, 
							B name(V), 
							~B ack_spacing(X)} 
							<- 
							+.lock, 
							.send(leader, :tell, set_spacing_from(V)), 
							+ack_spacing(X), 
							-.lock;

// ============ leaving

+!leave_platoon [achieve]: {B name(X), 
							~B leave_agreement(X)} 
							<- 
							.send(leader, :tell, message(X, 0)), 
							*leave_agreement(X);

+!leave_platoon [achieve]: {B name(X), 
							B leave_agreement(X)} <- 
							+!speed_contr(0) [perform], 
							+!steering_contr(0) [perform]; 


//+!leave_platoon [achieve]: {B name(X), B leave_agreement(X), 
//							B sp_contr, B steering_contr, B spacing} <- 
//							perf(speed_controller(0)), -sp_contr, +!steering_contr(0) [perform]; 

+!leave_platoon [achieve]: {B name(X), 
							B leave_agreement(X),
							~B sp_contr, 
							~B steering_contr, 
							~B changed_lane} 
							<- 
							perf(join_ok(0)), 
							*changed_lane;

+!leave_platoon [achieve]: {B changed_lane,
						   B name(X), 
						   ~B sp_contr, 
						   ~B steering_contr}
						   <- 
						   .send(leader, :tell, message(X, 2)), 
						   *no_platoon_m;
