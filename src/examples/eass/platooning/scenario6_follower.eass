

:name: follower

:Initial Beliefs:

:Reasoning Rules:

platoon_m(X, Y):- name(X), platoon_ok;
//platoon_m(X, Y):- sp_contr, steering_contr, platoon_m, platoon_ok;

leave_platoon:- leave_ok;

steering_cont(1):- steering_contr;

steering_cont(0):- ~ steering_contr;

set_spacing(X):- ack_spacing(X);
// set_spacing(X):- spacing(X), spacing, ack_spacing(X);


:Initial Goals:


:Plans:
	/* Default plans for handling messages */
	+.received(:tell, B): {True} <- +B;   
	+.received(:perform, G): {True} <- +!G [perform];
	+.received(:achieve, G): {True} <- +!G [achieve];

+id(X): {X== 1}<- perf(join_ok(1));

+id(X): {X== 2}<- perf(join_ok(1));

+id_front(X): {B id(3)}<- perf(join_position(X));

+ready_to_leave: {B name(follower3), 
				 ~G platoon_m(follower3, FRONT) [achieve],
				 ~G leave_platoon [achieve],
				 ~G set_spacing(X) [achieve]}
				 <- 
				-leave_agreement(follower3),
				-leave_ok,
		 		+!leave_platoon [achieve];

+ready_to_leave: {B name(follower3), 
				 G platoon_m(follower3, FRONT) [achieve]}
				 <- 
				 -ready_to_leave;

+ready_to_leave: {B name(follower3), 
				 G leave_platoon [achieve]}
				 <- 
				 -ready_to_leave;

//===========initialisation phase-- vehicle joins to platoon after 50 sec

+platoon_set_up: {True}<- 
				+.lock,
				+!speed_contr(1) [perform],
				+!steering_contr(1) [perform],
				+platoon_ok,
				-.lock;

+ready_to_join: {B name(follower3), 
				B name_front(FRONT), 
				~G leave_platoon [achieve], 
				~B steering_contr, 
				~B platoon_m, 
				~G platoon_m(follower3, FRONT) [achieve]} 
				<- 
				-join_agreement(follower3, FRONT),
				-platoon_ok, 
				+!platoon_m(follower3, FRONT) [achieve], 
				print(follower_3_drop_goal_or_successfully_joined_in_the_middle);

+ready_to_join: {B name(follower3), 
				B name_front(FRONT1), 
				~G leave_platoon [achieve], 
				B steering_contr, B platoon_m} 
				<- 
				-ready_to_join;

+ready_to_join: {B name(follower3), 
				B name_front(FRONT2), 
				G leave_platoon [achieve]} 
				<- 
				-ready_to_join;

+ready_to_join: {B name(follower3),
			 	B name_front(FRONT), 
				G platoon_m(follower3, FRONT) [achieve]} 
				<-
				-ready_to_join;


+wrong_front: {G platoon_m(SENDER, FRONT3) [achieve]}
			  <- 
			  -!platoon_m(SENDER, FRONT3) [achieve], 
				print(belief_not_able_to_join_to_front_of_a_non_platoon_member);

//+!platoon_m(SENDER1, FRONT4) [achieve]: 
//				{G set_spacing(X) [achieve]}
//				<-
//				*set_spacing(X);

+!platoon_m(SENDER1, FRONT4) [achieve]: 
				{B name(SENDER1), 
				~B join_agreement(SENDER1, FRONT4)} 
				<- 
				+!speed_contr(0) [perform], 
				+!steering_contr(0) [perform],
				.send(leader, :tell, message(SENDER1, 1, FRONT4)), -.lock, 
				*join_agreement(SENDER1, FRONT4);

+!platoon_m(SENDER20, FRONT20) [achieve]: 
				{B name(SENDER20), 
				B join_agreement(SENDER20, FRONT20),
				G set_spacing(X) [achieve]} 
				<- 
				-!set_spacing(X) [achieve],
				.send(leader, :tell, set_spacing_from_failed(X, SENDER20));

+!platoon_m(SENDER2, FRONT5) [achieve]: 
				{B name(SENDER2), 
				B join_agreement(SENDER2, FRONT5), 
				~B changed_lane,
				~ G set_spacing(X) [achieve]} 
				<- 
				+!speed_contr(0) [perform], 
				+!steering_contr(0) [perform], 
				perf(join_ok(1)), 
				*changed_lane;


+!platoon_m(SENDER3, FRONT6) [achieve]: 
				{B name(SENDER3), 
				B join_agreement(SENDER3, FRONT6), 
				B changed_lane, 
				~B steering_contr, 
				~B sp_contr, 
				B initial_distance,
				~G set_spacing(X) [achieve]} 
				<- 
				+!speed_contr(1) [perform], 
				+!steering_contr(1) [perform];	
										
+!platoon_m(SENDER4, FRONT7) [achieve]: 
				{B name(SENDER4), 
				B join_agreement(SENDER4, FRONT7), 
				B changed_lane, 
				~B steering_contr, 
				~B sp_contr,
				~B initial_distance,
				~G set_spacing(X) [achieve]} 
				<- 
				+!speed_contr(1) [perform], 
				*initial_distance;

+!platoon_m(SENDER5, FRONT8) [achieve]: 
				{B name(SENDER5), 
				B join_agreement(SENDER5, FRONT8), 
				B changed_lane, 
				~B steering_contr, 
				B sp_contr, 
				B initial_distance,
				~G set_spacing(X) [achieve]}
				<- 
				+!steering_contr(1) [perform];


+!platoon_m(SENDER6, FRONT9) [achieve]: 
				{B name(SENDER6), 
				B join_agreement(SENDER6, FRONT9), 
				B changed_lane, 
				B steering_contr,
				~B platoon_ok,
				~G set_spacing(X) [achieve]}
				<- 
				.send(leader, :tell, message(SENDER6, 2)), 
				-leave_ok,
				+platoon_ok, 
				*platoon_m;		

+!speed_contr(X1) [perform]: {X1==0}<- +.lock, perf(speed_controller(X1)), -sp_contr, -.lock;
+!speed_contr(X2) [perform]: {X2==1}<- +.lock, perf(speed_controller(X2)), +sp_contr, -.lock;

+!steering_contr(X1) [perform]: {X1==0} <-  +.lock, perf(steering_controller(X1)), -steering_contr, -.lock;
+!steering_contr(X2) [perform]: {X2==1, B sp_contr}<-  +.lock, perf(steering_controller(X2)), +steering_contr, -.lock;

// when there is a joining goal, wait until speed controller switches to automatic

+!set_spacing(X1) [achieve]: {B name(K), ~B platoon_m(K, F)}
							<- 
							.send(leader, :tell, set_spacing_from_failed(X1, K)),
							-!set_spacing(X1) [achieve];
	
+!set_spacing(X2) [achieve]: {B platoon_m(K, F),
							G leave_platoon [achieve],
							B name(K),
							B leave_agreement(K), 
							~B leave_ok} 
							<-
							-ack_spacing(X2), 
							*leave_platoon;  
							

// having leaving platoon goal but not leave_agreement from leader

//+!set_spacing(X3) [achieve]: {G leave_platoon [achieve],
//							B name(K),
//							~B leave_agreement(K),
//							G set_spacing(Y) [achieve], 
//							Y < X3} 
//							<- 
//							-!set_spacing(Y) [achieve], 
//							-ack_spacing(X3);
							
//+!set_spacing(X4) [achieve]: {G leave_platoon [achieve],
//							B name(K),
//							~B leave_agreement(K),
//							G set_spacing(Y) [achieve], 
//							X4 < Y} 
//							<- 
//							-!set_spacing(Y) [achieve], 
//							-ack_spacing(X4);
							
+!set_spacing(X5) [achieve]: {B platoon_m(K, F), 
							G leave_platoon [achieve],
							B name(K),
							~B leave_agreement(K),
							~B spacing(X5),
							B spacing}
							<- 
							-spacing,
							perf(set_spacing(X5)), 
							*spacing,
							.send(leader, :tell, set_spacing_from(K)), 							
							+ack_spacing(X5);

+!set_spacing(X6) [achieve]: {B platoon_m(K, F),
							G leave_platoon [achieve],
							B name(K),
							~B leave_agreement(K),
							~B spacing}
							<- 
							perf(set_spacing(X6)), 
							*spacing,
							.send(leader, :tell, set_spacing_from(K)), 							
							+ack_spacing(X6);
							
//+!set_spacing(X7) [achieve]: {B platoon_m(K, F),
//							G leave_platoon [achieve],
//							B name(K),
//							~B leave_agreement(K),
//							B spacing(X7), 
//							B spacing, 
//							~B ack_spacing(X7)} 
//							<- 
//							+.lock, 
//							.send(leader, :tell, set_spacing_from(K)), 
//							+ack_spacing(X7), 
//							-.lock;




							 
// neither platoon_m nor leave platoon goal
							
+!set_spacing(X15) [achieve]: {B platoon_m(K, F),
							~G leave_platoon [achieve],
							B name(K),
							~B spacing(X15),
							B spacing}
							<- 
							-spacing,
							perf(set_spacing(X15)), 
							*spacing,
							.send(leader, :tell, set_spacing_from(K)), 
							+ack_spacing(X15); 


+!set_spacing(X16) [achieve]: {B platoon_m(K, F),
							~G leave_platoon [achieve],
							B name(K),
							~B spacing}
							<- 
							perf(set_spacing(X16)), 
							*spacing,
							.send(leader, :tell, set_spacing_from(K)), 
							+ack_spacing(X16); 
							
							
//+!set_spacing(X17) [achieve]: {B platoon_m(K, F),
//							~G leave_platoon [achieve],
//							B spacing(X17), 
//							B spacing, 
//							B name(K), 
//							~B ack_spacing(X17)} 
//							<- 
//							+.lock, 
//							.send(leader, :tell, set_spacing_from(K)), 
//							+ack_spacing(X17), 
//							-.lock;
							
//+!set_spacing(X20) [achieve]: {True}<- print(good);

// ============ leaving

+!leave_platoon [achieve]: {B name(X), 
							~B leave_agreement(X)} 
							<- 
							.send(leader, :tell, message(X, 0)), 
							*leave_agreement(X);

+!leave_platoon [achieve]: {B name(X), 
							B leave_agreement(X),
							G set_spacing(Y) [achieve]} 
							<- 
							-!set_spacing(Y) [achieve],
							.send(leader, :tell, set_spacing_from_failed(Y, X));


+!leave_platoon [achieve]: {B name(X), 
							B leave_agreement(X),
							B sp_contr,
							~ G set_spacing(Y) [achieve]}
							<- 
							+!speed_contr(0) [perform], 
							+!steering_contr(0) [perform]; 


//+!leave_platoon [achieve]: {B name(X), B leave_agreement(X), 
//							B sp_contr, B steering_contr, B spacing, ~G set_spacing(Y) [achieve]} <- 
//							perf(speed_controller(0)), -sp_contr, +!steering_contr(0) [perform]; 

+!leave_platoon [achieve]: {B name(X), 
							B leave_agreement(X),
							~B sp_contr, 
							~B steering_contr, 
							~B changed_lane,
							~ G set_spacing(Y) [achieve]} 
							<- 
							perf(join_ok(0)), 
							*changed_lane;

+!leave_platoon [achieve]: {B changed_lane,
						   B name(X), 
						   ~B sp_contr, 
						   ~B steering_contr,
						   ~ G set_spacing(Y) [achieve]}
						   <- 
						   .send(leader, :tell, message(X, 2)),
						   *no_platoon_m,
						   -platoon_ok,
						   +leave_ok;