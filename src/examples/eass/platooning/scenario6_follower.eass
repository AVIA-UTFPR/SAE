
:name: follower

:Initial Beliefs:

:Reasoning Rules:

platoon_m(X, Y):- steering_contr, platoon_m;

:Initial Goals:

:Plans:

	/* Default plans for handling messages */
	+.received(:tell, B): {True} <- +B;   
	+.received(:perform, G): {True} <- +!G [perform];
	+.received(:achieve, G): {True} <- +!G [achieve];

	
	
+id(X): {X== 1}<- perf(join_ok(X));

+id(X): {X== 2}<- perf(join_ok(X));

//initialisation phase-- vehicle joins to platoon after 50 sec
+platoon_set_up: {True}<- perf(speed_controller(1)), perf(steering_controller(1));

+ready_to_join: {B name(follower3)} <- print(ready_to_join), +!platoon_m(follower3, follower1) [achieve], print(follower_3_drop_goal_or_successfully_joined_in_the_middle);

+wrong_front: {G platoon_m(SENDER, FRONT) [achieve]}<- -!platoon_m(SENDER, FRONT) [achieve], print(belief_not_able_to_join_to_front_of_a_non_platoon_member);

//+!platoon_m(SENDER, FRONT) [achieve]: {B id(SENDER), ~B platoon_m, B distance(FRONT)} <- 
+!platoon_m(SENDER, FRONT) [achieve]: {B name(SENDER), ~B platoon_m, ~B join_agreement(SENDER, FRONT)} <- 
										.send(leader, :tell, message(SENDER, 1, FRONT)), *join_agreement(SENDER, FRONT);
						

+!platoon_m(SENDER, FRONT) [achieve]: {B join_agreement(SENDER, FRONT), B name(SENDER), B id(Y), ~B lane_1} <- perf(join_ok(Y)), print(perform_change_lane), *lane_1;

+!platoon_m(SENDER, FRONT) [achieve]: {B lane_1, ~B initial_distance} <- perf(speed_controller(1)), +sp_contr, *initial_distance;

+!platoon_m(SENDER, FRONT) [achieve]: {B lane_1, B initial_distance, ~B steering_contr, ~B sp_contr } <- perf(speed_controller(1)), perf(steering_controller(1)), +steering_contr;

+!platoon_m(SENDER, FRONT) [achieve]: {B sp_contr, B initial_distance} <- perf(steering_controller(1)), -sp_contr, +steering_contr;

+!platoon_m(SENDER, FRONT) [achieve]: {B steering_contr}<- .send(leader, :tell, message(SENDER, 2)), *platoon_m;		

+!set_spacing(X) [achieve]: {~B spacing(X)} <- perf(set_spacing(X)), *joining_spacing;

+!set_spacing(X) [achieve]: {B joining_spacing, B name(V)} <- .send(leader, :tell, set_spacing_from(V)), -!set_spacing(X) [achieve];