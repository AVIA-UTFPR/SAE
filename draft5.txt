GWENDOLEN

:name: Car

:Initial Beliefs:

min(0,0)

:Reasoning Rules:

arrived(X,Y) :- destination(X,Y), at(X,Y);
drive_to(X,Y) :- arrived(X,Y);
finish_all_rides :- done_all_rides;

// ------------------ Directions ------------------

north_south :- north;
north_south :- south;
east_west :- east;
east_west :- west;

// ------------------ Ride information ------------------

current_pick_up(X,Y) :- ride_info, pick_up(X,Y);
current_drop_off(X,Y) :- ride_info, drop_off(X,Y);

journey_not_possible(X,Y) :-verify_journey(X,Y), ~possible_journey_to(X,Y);

reach(X,Y) :- try_to_reach(X,Y), at(X,Y);

// ------------------ Drive ------------------

turn(north) :- heading(north), destination(X,Y), at(AT_X, Y);
turn(south) :- heading(south), destination(X,Y), at(AT_X, Y);

turn(east) :- heading(east), east, destination(X,Y), at(X, AT_Y);
turn(west) :- heading(west), west, destination(X,Y), at(X, AT_Y);

// ------------------ Avoid Obstacles ------------------

obstacle_ahead(DIRECTION) :- at(AT_X, AT_Y), obstacle(DIRECTION, AT_X, AT_Y);

can_adapt(DIRECTION, D_X, D_Y) :- at(AT_X, AT_Y), ~obstacle(DIRECTION, AT_X, AT_Y), ~known_route(DIRECTION, D_X, D_Y);
can_adapt_simple(DIRECTION, D_X, D_Y) :- can_adapt(DIRECTION, D_X, D_Y), go(DIRECTION);

go(north_south)	:- ~heading(north), ~heading(south), ~adapt(east), ~adapt(west);
go(east_west) 	:- ~heading(east), ~heading(west), ~adapt(north), ~adapt(south);

go(north) :- ~adapt(south), go(north_south);
go(south) :- ~adapt(north), go(north_south);
go(east) :- ~adapt(west), go(east_west);
go(west) :- ~adapt(east), go(east_west);

known_route(north,KR_X, KR_Y) :- 	at(AT_X, AT_Y), adapt_from_to(AT_X, AT_Y, north, KR_X, KR_Y), moved_from_to(AT_X, AT_Y, south, KR_X, KR_Y);
known_route(south,KR_X, KR_Y) :- 	at(AT_X, AT_Y), adapt_from_to(AT_X, AT_Y, south, KR_X, KR_Y), moved_from_to(AT_X, AT_Y, north, KR_X, KR_Y);
known_route(east,KR_X, KR_Y) :-		at(AT_X, AT_Y), adapt_from_to(AT_X, AT_Y, east, KR_X, KR_Y), moved_from_to(AT_X, AT_Y, west, KR_X, KR_Y);
known_route(west,KR_X, KR_Y) :- 	at(AT_X, AT_Y), adapt_from_to(AT_X, AT_Y, west, KR_X, KR_Y), moved_from_to(AT_X, AT_Y, east, KR_X, KR_Y);

from(DIRECTION, KR_X, KR_Y) :- at(AT_X, AT_Y), moved_from_to(AT_X, AT_Y, DIRECTION, KR_X, KR_Y);

no_route(DIRECTION) :- at(AT_X, AT_Y), known_route(DIRECTION);


// Emergency
control_emergency (X,Y) :- ~crashed(X,Y); // Car recovered from crash in (X,Y)


:Initial Goals:

finish_all_rides [achieve]

:Plans:


// ---------------------------------------------- Finish all Rides - !finish_all_rides [achieve] ----------------------------------------------

// Get location of the car in the environment
+!finish_all_rides [achieve] : {~B at(X,Y)} <- localize, *at(GPS_X, GPS_Y);

// If no passengers is available, car goes back to depot
+!finish_all_rides [achieve] : {B no_possible_new_ride, B depot(X,Y)} <- message(depot), +done_all_rides; //+!complete_journey (X, Y) [perform],

// Get New Ride
+!finish_all_rides [achieve] : {~B ride_info} <- get_ride, *ride_info;

// Verify it can reach destinations of the new ride before it tries to pick up the passanger
+!finish_all_rides [achieve] : {B pick_up(X,Y),  B obstacle(center, X, Y)}
								<- refuse_ride(pick_up), -pick_up(X,Y), -ride_info;
+!finish_all_rides [achieve] : {B drop_off(X,Y), B obstacle(center, X, Y)}
								<- refuse_ride(drop_off), -drop_off(X,Y), -ride_info;

// ---------------------------------------------- Pick Up ----------------------------------------------


// Current ride - Pick up
+!finish_all_rides [achieve] : {B current_pick_up(X,Y), ~B try_to_reach(X,Y), ~B passenger}
								<- 	+!complete_journey (X,Y) [perform],
									+try_to_reach(X,Y);

+!finish_all_rides [achieve] : {B current_pick_up(X,Y), B reach(X,Y), ~B passenger}
								<- 	park(pick_up), +passenger,
									-pick_up(X,Y), -try_to_reach(X,Y);

+!finish_all_rides [achieve] : {B current_pick_up(X,Y), ~B reach(X,Y), ~B passenger}
								<- 	refuse_ride(pick_up), -pick_up(X,Y),
									-try_to_reach(X,Y), -ride_info;


// ---------------------------------------------- Drop Off ----------------------------------------------

// Current ride - Drop off
+!finish_all_rides [achieve] : {B current_drop_off(X,Y), ~B try_to_reach(X,Y), B passenger}
								<- 	+!complete_journey (X,Y) [perform],
									+try_to_reach(X,Y);


+!finish_all_rides [achieve] : {B current_drop_off(X,Y), B reach(X,Y), B passenger}
								<- 	park(drop_off), -passenger,
									-drop_off(X,Y), -try_to_reach(X,Y), -ride_info;

+!finish_all_rides [achieve] : {B current_drop_off(X,Y), ~B reach(X,Y), B passenger}
								<- 	refuse_ride(drop_off), park(drop_off), -passenger,
									-drop_off(X,Y), -try_to_reach(X,Y), -ride_info;

// ----------------------------------------------

+!clear_current_ride [perform] : {B pick_up(PK_X,PK_Y), B drop_off(DP_X,DP_Y)} <- -pick_up(PK_X,PK_Y), -drop_off(DP_X,DP_Y), -ride_info;


// ---------------------------------------------- Complete Journey ----------------------------------------------


// Go from current position to at(X,Y)
+!complete_journey (X,Y) [perform] : {True} <- 	+!clear_travel_data [perform],
												+destination(X,Y),
												+moving, +!drive_to(X, Y) [achieve], -moving,
												-destination(X, Y);

+!clear_travel_data [perform] : {True} <- 	+!clear_direction_data [perform],
											-heading(north), -heading(south), -heading(east), -heading(west);

+!clear_adapt [perform] : {True} <- -adapt(north), -adapt(south), -adapt(east), -adapt(west);



// --------------------------------------------- Get Route

+!get_route [perform] : {B destination(X,Y)} <- +!clear_travel_data [perform], compass(X, Y), *receive_direction;

+!clear_direction_data [perform] : {True}
									<- +!clear_adapt [perform],
										-north, -south, -east, -west,
										-receive_direction;

// ---------------------------------------------- Drive - !drive_to(X,Y) ----------------------------------------------


// Choose first direction to go
+!drive_to(X,Y) [achieve] : {~B north, ~B south, ~B east, ~B west} <- +!get_route [perform];

// Decide where the car should head to
+!drive_to(X,Y) [achieve] : {~B heading(H), B north} <- +heading(north);
+!drive_to(X,Y) [achieve] : {~B heading(H), B south} <- +heading(south);
+!drive_to(X,Y) [achieve] : {~B heading(H), B east}  <- +heading(east);
+!drive_to(X,Y) [achieve] : {~B heading(H), B west}  <- +heading(west);

// If car needs to turn
+!drive_to(X,Y) [achieve] : {B turn(north), B east}  <- -heading(north), +heading(east); // north to east
+!drive_to(X,Y) [achieve] : {B turn(north), B west}  <- -heading(north), +heading(west); // north to west

+!drive_to(X,Y) [achieve] : {B turn(south), B east}  <- -heading(south), +heading(east); // south to east
+!drive_to(X,Y) [achieve] : {B turn(south), B west}  <- -heading(south), +heading(west); // south to west

// If car is blocked or can't reach destination, drop the goal
+!drive_to(X,Y) [achieve] : {B blocked} <- -blocked, -!drive_to(X,Y) [achieve];
+!drive_to(X,Y) [achieve] : {B obstacle(center, X, Y)} <- -!drive_to(X,Y) [achieve];

// Wait to be in movement to drive
+!drive_to(X,Y) [achieve] : {~B moving} <- *moving;

// Obstacle Avoidance
+!drive_to(X,Y) [achieve] : {B heading(D), B obstacle_ahead(D)}
							<- -moving, +adapt, +!adapt_route(D,X,Y) [achieve];

+!drive_to(X,Y) [achieve] : {B heading(D), B known_route(D,X,Y)}
							<- -moving, +adapt, +!adapt_route(D,X,Y) [achieve];

// Known Route Avoidance

// When the car believes it can just move
+!drive_to(X,Y) [achieve] : {B heading(D), B can_adapt(D,X,Y)} <- print(nD), +!drive_direction(D) [perform]; //print(normalDrive),

+!drive_to(X,Y) [achieve] : {True} <- print(normalDriveStuck), -!drive_to(X,Y) [achieve];


// ---------------------------------------- Drive Direction ----------------------------------------

+!drive_direction(D) [perform] : { G drive_to(X, Y) [achieve] }
						<- -moving, drive(D), *at(NEW_X, NEW_Y), -moving, +moved_from_to(NEW_X, NEW_Y, D, X, Y), +moving;

// ---------------------------------------- Obstacle Avoidance and adapt Route - !adapt_route(D, X, Y) [achieve]  ----------------------------------------


+!adapt_route(D,X,Y) [achieve] : {B obstacle_ahead(north), B obstacle_ahead(south), B obstacle_ahead(east), B obstacle_ahead(west)}
							<- +blocked, -!adapt_route(D) [achieve];

+!adapt_route(D,X,Y) [achieve] : {B adapt, B can_adapt(D,X,Y), B at(AT_X, AT_Y)}
							<- 	-adapt, print(fixed), +adapt_from_to(AT_X, AT_Y, D, X, Y),
								+!drive_direction(D) [perform],
								+!get_route [perform],
								-!adapt_route(D,X,Y) [achieve];


// ---------------------------------------- HOLD THE SCROLL IS HERE  ----------------------------------------

+!adapt_route(D,X,Y) [achieve] : {~B adapt} <- print(waitMolagKena), *adapt, print(stopWaiting);

// ------------------------------ North or South - Avoid Simple  ------------------------------


+!adapt_route(south,X,Y) [achieve] : {B can_adapt(north,X,Y), B south, B known_route(east,X,Y), B known_route(south,X,Y)}
									<- -adapt,
									message("Reroute South to East Go north"),
									+!adapt_drive_direction(north,X,Y) [perform];

// Simple Belief North or South to East or West
+!adapt_route(D,X,Y) [achieve] : {B can_adapt_simple(east,X,Y), B east, B north_south}
								<- -adapt, message("Simple Belief North or South to East"), +!adapt_drive_direction(east,X,Y) [perform];
+!adapt_route(D,X,Y) [achieve] : {B can_adapt_simple(west,X,Y), B west, B north_south}
								<- -adapt, message("Simple Belief North or South to West"), +!adapt_drive_direction(west,X,Y) [perform];




+!adapt_route(D,X,Y) [achieve] : {B can_adapt_simple(east,X,Y), B north_south}
									<- -adapt, message("Reroute North or South to East"), +!adapt_drive_direction(east,X,Y) [perform];
+!adapt_route(D,X,Y) [achieve] : {B can_adapt_simple(west,X,Y), B north_south}
									<- -adapt, message("Reroute North or South to West"), +!adapt_drive_direction(west,X,Y) [perform];


// ------------------------------ East or West - Avoid Simple  ------------------------------

//Simple Belief East or West to North or South
// If it came from North, adapt South. And vice-versa

+!adapt_route(D,X,Y) [achieve] : {B north, B can_adapt_simple(south,X,Y), B east_west}
									<- -adapt, message("Simple Belief East or West to South"), +!adapt_drive_direction(south,X,Y) [perform];
+!adapt_route(D,X,Y) [achieve] : {B south, B can_adapt_simple(north,X,Y), B east_west}
									<- -adapt, message("Simple Belief East or West to North"), +!adapt_drive_direction(north,X,Y) [perform];


+!adapt_route(D,X,Y) [achieve] : {B can_adapt_simple(north,X,Y), B east_west}
									<- -adapt, message("Reroute East or West to North"), +!adapt_drive_direction(north,X,Y) [perform];
+!adapt_route(D,X,Y) [achieve] : {B can_adapt_simple(south,X,Y), B east_west}
									<- -adapt, message("Reroute East or West to South"), +!adapt_drive_direction(south,X,Y) [perform];


// ------------------------------ East or West - Avoid Obstacles while re rerouting  ------------------------------

//Reroute the reroute from East or West to North
+!adapt_route(D,X,Y) [achieve] : {~B can_adapt(north,X,Y), B adapt(north), B can_adapt(south,X,Y), B east_west, B at(AT_X, AT_Y)}
									<- -adapt,
									message("EW Cant keep going north"),
									-adapt(north),
									no_further_from(AT_X, AT_Y, X, Y), *no_further_info(AT_X, AT_Y, X, Y),
									+!drive_direction(south) [perform],
									+adapt;

//Reroute the reroute from East or West to North
+!adapt_route(D,X,Y) [achieve] : {~B can_adapt(south,X,Y), B adapt(south), B can_adapt(north,X,Y), B east_west}
									<- -adapt,
									message("EW Cant keep going south"),
									+!clear_adapt [perform],
									no_further_from(X, Y),
									+!drive_direction(north) [perform], +adapt;

// Return
+!adapt_route(east,X,Y) [achieve] : {~B can_adapt(north,X,Y), ~B can_adapt(south,X,Y), B can_adapt(west,X,Y)}
									<- -adapt,
									message("Return east"),
									+!clear_adapt [perform],
									+!go_back(west,X,Y) [perform];
// Return
+!adapt_route(west,X,Y) [achieve] : {~B can_adapt(north,X,Y), ~B can_adapt(south,X,Y), B can_adapt(east,X,Y)}
									<- -adapt,
									message("Return west"),
									+!clear_adapt [perform],
									+!go_back(east,X,Y) [perform];


// ------------------------------------------------------------
+!adapt_route(D,X,Y) [achieve] : {True}
				<-	message("                                   "),
					message("new_adapt_rule adapt_route_true"),
					message("                                   "),
					message(D), +blocked, -!adapt_route(D,X,Y) [achieve];

// --------------------------------------------------------------------------------

+!adapt_drive_direction(ADAPT_D,X,Y) [perform] : {B at(AT_X,AT_Y)}
							<- 	-adapt, +adapt_from_to(AT_X, AT_Y, ADAPT_D, X, Y), +adapt(ADAPT_D),
								-moving, drive(ADAPT_D), *at(NEW_X, NEW_Y), -moving,
								+moved_from_to(NEW_X, NEW_Y, ADAPT_D, X, Y), +adapt;

// --------------------------------------------------------------------------------
+!go_back(north,X,Y) [perform]: {True}
						<- -moving, drive(north), *at(GB_X, GB_Y), -moving, +adapt_from_to(GB_X, GB_Y, south, X, Y), +moved_from_to(GB_X, GB_Y, north, X, Y), +adapt;

+!go_back(south,X,Y) [perform]: {True}
						<- -moving, drive(south), *at(GB_X, GB_Y), -moving, +adapt_from_to(GB_X, GB_Y, north, X, Y), +moved_from_to(GB_X, GB_Y, south, X, Y), +adapt;

+!go_back(east,X,Y) [perform]: {True}
						<- -moving, drive(east), *at(GB_X, GB_Y), -moving, +adapt_from_to(GB_X, GB_Y, west, X, Y), +moved_from_to(GB_X, GB_Y, east, X, Y), +adapt;

+!go_back(west,X,Y) [perform]: {True}
						<- -moving, drive(west), *at(GB_X, GB_Y), -moving, +adapt_from_to(GB_X, GB_Y, east, X, Y), +moved_from_to(GB_X, GB_Y, west, X, Y), +adapt;


// ---------------------------------------- adapt_from_to - moved_from_to ----------------------------------------

+moved_from_to(M_X, M_Y, south, D_X, D_Y) : {B adapt_from_to(M_X, M_Y, north, D_X, D_Y), G drive_to(D_X, D_Y) [achieve]}
											<- +.lock, message("No more north to"), message(M_X), message(M_Y), message(D_X), message(D_Y), -.lock;

+moved_from_to(M_X, M_Y, west, D_X, D_Y) : {B adapt_from_to(M_X, M_Y, east, D_X, D_Y), G drive_to(D_X, D_Y) [achieve]}
											<- +.lock, message("No more east to"), message(M_X), message(M_Y), message(D_X), message(D_Y), -.lock;

// +.lock, message(adapt), message("4 2"), message(DDD), message(D_X), message(D_Y), -.lock;


// ---------------------------------------- obstacle(D, X,Y)  ----------------------------------------
+obstacle(center, X, Y) : {G drive_to(X,Y) [achieve]} <- -!drive_to(X,Y) [achieve], -!adapt_route(D) [achieve];

// ---------------------------------------- at(X,Y)  ----------------------------------------

+at(X,Y) : {B obstacle(center, X,Y)} <- -moving, +crashed(X,Y), +!control_emergency (X,Y) [achieve], +moving;
+at(X,Y) : {~B obstacle(center, X,Y)} <- +moving;


// ---------------------------------------- Control Emergencies - !control_emergency (X,Y)  ----------------------------------------
// If Crashed, ask for help
+!control_emergency (X,Y) [achieve] : {B help(X,Y), B alert_state} <-  -help(X,Y), -alert_state, -crashed(X,Y);
+!control_emergency (X,Y) [achieve] : {B crashed(X,Y), ~B alert_state} <- call_emergency(X,Y), *help(X,Y), +alert_state;
